# section 1 imports packages/modules/libraries/extensions to run-
# pygame, math functions, cv2 functions, time functions and sdk needed to run the drone,
# also our own KeyPressModule we created

from djitellopy import Tello

import KeyPressModule as kp

import cv2

import numpy as np

import time

import math

# section 2 defines the speeds/parameters of the drone as variables then defines the d, a, and hInterval variables that
# combines the interval variable with each of the speeds
# parameters
fSpeed = 112  # Forward/Backward cm/sec
aSpeed = 26  # Angular Velocity, Degrees/sec
uSpeed = 26  # Up/Down cm/sec
interval = 0.25

dInterval = fSpeed * interval  # Distance Interval
aInterval = aSpeed * interval  # Angular Interval
hInterval = uSpeed * interval  # Height Interval
#

x, y = 500, 500

a = 0

yaw = 0

kp.init()

tello = Tello()

tello.connect()

print(tello.get_battery())

# global img

# tello.streamon()

# section 3 uses the KeyPressModule and its code
# defines the function getKeyboardInput and uses kp for KeyPressModule to define what key presses do for this code
# defines variables and sets their values to be used in what key presses do
def getKeyboardInput():

    lr, fb, ud, yv = 0, 0, 0, 0

    speed = 50

    global x, y, yaw

    d = 0

    if kp.getKey("LEFT"):
        lr = -speed
        d = dInterval
        a = 180

    elif kp.getKey("RIGHT"):
        lr = speed
        d = -dInterval
        a = -180

    if kp.getKey("UP"):
        fb = speed
        d = dInterval
        a = 270

    elif kp.getKey("DOWN"):
        fb = -speed
        d = -dInterval
        a = -90

    if kp.getKey("w"):
        ud = speed

    elif kp.getKey("s"):
        ud = -speed

    if kp.getKey("a"):
        yv = -speed
        yaw += aInterval

    elif kp.getKey("d"):
        yv = speed
        yaw -= aInterval

    if kp.getKey("q"):
        tello.land()
        time.sleep(3)

    if kp.getKey("e"):
        tello.takeoff()

# calculating curves made, updating variables a, x, and y, returns new values for lr, fb, ud, yv

    a += yaw
    x += int(d*math.cos(math.radians(a)))
    y += int(d*math.sin(math.radians(a)))

    # if kp.getKey('z'):
        # cv2.imwrite(f'Resources/Images/{time.time()}.jpg')
        # time.sleep(0.3)

    return [lr, fb, ud, yv]

# section 4 defines the drawPoints function and what it does; it defines how points are drawn
def drawPoints(img, points):
    cv2.circle(img, (points[0], points[1]), 20, (0, 0, 255), cv2.FILLED)

# section 5 defines the vals variable as equal to getKeyboardInput into the rc control
# for the drone and the points, the vals defines values to be sent in a continuos loop
# back to draw points based on those vals

while True:

    vals = getKeyboardInput()

    tello.send_rc_control(vals[0], vals[1], vals[2], vals[3])

    img = np.zeros((1000, 1000, 3), np.uint8)
    points = (vals[4], vals[5])
    drawPoints(img, points)
    cv2.imshow("Output", img)
    cv2.waitKey(1)

    # surviellance
    # img = tello.get_frame_read().frame
    # img = cv2.resize(img, (360, 240))
    # cv2.imshow("image", img)
    # cv2.waitKey(1)
